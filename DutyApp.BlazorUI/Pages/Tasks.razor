@page "/tasks"
@using DutyApp.Application.DTOs;
@using DutyApp.Application.Services;
@using System.Collections.Generic

<div class="container mx-auto p-4">
    <h1 class="text-4xl font-bold mb-4">Tasks</h1>

    <button class="btn btn-primary mb-4" @onclick="CreateTask">Create Task</button>

    @if (tasks != null && tasks.Any())
    {
        <ul class="list-disc list-inside">
            @foreach (var task in tasks)
            {
                <li>@task.Title</li>
            }
        </ul>
    }
    else
    {
        <p>No tasks found.</p>
    }

    <div class="modal" id="createTaskModal">
        <div class="modal-box">
            <h2 class="font-bold text-lg">Create Task</h2>
            <!-- Add input fields for task details -->
            <div class="modal-action">
                <button class="btn" @onclick="HideModal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveTask">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<TaskDto> tasks;
    private TaskDto newTask = new TaskDto();
    private bool isModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasksAsync();
    }

    private async Task LoadTasksAsync()
    {
        tasks = (await TaskService.GetTasksAsync()).ToList();
    }

    private void CreateTask()
    {
        newTask = new TaskDto();
        ShowModal();
    }

    private async Task SaveTask()
    {
        await TaskService.CreateTaskAsync(newTask);
        await LoadTasksAsync(); // Refresh the tasks after adding a new one
        HideModal();
    }

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
    }
}
