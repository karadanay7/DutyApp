@page "/groups"
@using DutyApp.Application.DTOs;
@using DutyApp.Application.Services;

@using System.Collections.Generic

<div class="container mx-auto p-4">
    <h1 class="text-4xl font-bold mb-4">Groups</h1>

    <button class="btn btn-primary mb-4" @onclick="CreateGroup">Create Group</button>

    @if (groups != null && groups.Any())
    {
        <ul class="list-disc list-inside">
            @foreach (var group in groups)
            {
                <li>@group.Name</li>
            }
        </ul>
    }
    else
    {
        <p>No groups found.</p>
    }

    <div class="modal" id="createGroupModal">
        <div class="modal-box">
            <h2 class="font-bold text-lg">Create Group</h2>
            <input class="input input-bordered w-full mt-4" @bind="newGroup.Name" placeholder="Group Name" />
            <div class="modal-action">
                <button class="btn" @onclick="HideModal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveGroup">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<GroupDto> groups;
    private GroupDto newGroup = new GroupDto();
    private bool isModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadGroupsAsync();
    }

    private async Task LoadGroupsAsync()
    {
        groups = (await GroupService.GetGroupsAsync()).ToList();
    }

    private void CreateGroup()
    {
        newGroup = new GroupDto();
        ShowModal();
    }

    private async Task SaveGroup()
    {
        await GroupService.CreateGroupAsync(newGroup);
        await LoadGroupsAsync(); // Refresh the groups after adding a new one
        HideModal();
    }

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
    }
}
